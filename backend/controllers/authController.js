const jwt = require("jsonwebtoken");
// const bcrypt = require("bcryptjs");

const User = require("../models/User");

//generating token
const generateToken = (id) => {
  // made of 3 parts- header, payload, signature
  //id is payload ...data u want to  store in token////secret key is used to sign and verify the authenctivity of token/////he token can be verified later using the same secret key to ensure that it has not been tampered with.
  return jwt.sign({ id }, process.env.JWT_SECRET, { expiresIn: "1h" });
};

//LOgin user

exports.loginUser = async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) {
    return res
      .status(400)
      .json({ message: "Please provide both email and password" });
  }
  try {
    const user = await User.findOne({ email });
    if (!user || !(await user.comparePassword(password))) {
      return res.status(400).json({ message: "Invalid credentials" });
    }

    res
      .status(200)
      .json({ id: user._id, user, token: generateToken(user._id) });
  } catch (error) {
    res.status(500).json({ message: "Internal server error" });
  }
};

//REGISTER USER
exports.registerUser = async (req, res) => {
  const { name, email, password, profileImgUrl } = req.body;
  if (!name || !email || !password) {
    return res.status(400).json({ message: "Please fill in all fields" });
  }
  //CHECK IF EMAIL ALREADY EXISTS
  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email already exists" });
    }

    // create the user
    const user = await User.create({
      name,
      email,
      password,
      profileImgUrl,
    });
    //generate token
    const token = generateToken(user._id); //._id is the id generated by mongoose
    res.status(201).json({ id: user._id, user, token });
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error creating user", error: error.message });
  }
};

//GET USER INFO
exports.getUserInfo = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password"); // selecting all fields except password
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }
    res.status(200).json(user);
  } catch (error) {
    res.status(200).json({ message: "Internal server error" });
  }
};
