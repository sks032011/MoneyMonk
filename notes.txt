// npm i express jsonwebtoken mongoose dotenv bcryptjs multer xlsx


xlsx (in backend dev):
Read Excel files (parse .xlsx, .xls, or .csv)

Write/generate Excel files from JSON, arrays, or database data

Convert Excel sheets to JSON 
------------------------------------------------------------------
"scripts": {
 "start": "node server.js",
 "dev":"nodemon server.js"}
 --------------------------
   npm i nodemon --save-dev

   -------------------------------------------------------------------

   
What is CORS?
Imagine you own a bakery (your website or app). Normally, only employees (scripts from your own domain) can go into the kitchen and get ingredients (data). CORS is like a special permission system that lets trusted people from other businesses (other websites) come into your kitchen too.
Why Do We Need CORS?
By default, web browsers are very protective. They don't allow websites to share resources with each other. This is actually a good security measure - you wouldn't want a random website to be able to access your banking information from another tab!
But sometimes, this sharing is necessary. For example:

Your frontend website (what users see) might be at "myshop.com"
Your backend server (where data is stored) might be at "myshop-api.com"
How CORS Works in Plain Terms:

The Request: When your website tries to contact a different website for information, your browser adds a note saying, "Hey, I'm coming from thiswebsite.com"
The Check: The other website looks at this note and decides: "Do I allow visitors from thiswebsite.com?"
The Response: If yes, it sends back a message saying, "Yes, thiswebsite.com is allowed to see my data" along with the actual data you requested
Extra Safety Checks: For certain types of requests (like sending data rather than just viewing it), the browser first sends a "May I?" message and waits for permission before sending the actual request

Real-world Example:
Imagine you have a recipe website where:

The main website is at "myrecipes.com"
The images are stored at "myrecipes-images.com"

Without CORS, when users visit your recipe website, they wouldn't be able to see any of the images because the browser would block those cross-origin requests. By setting up CORS correctly, you tell the browser "It's okay for myrecipes.com to load images from myrecipes-images.com."

---------------------------------------------------------------

What is the Path Module?
The Path module in Node.js is like a smart navigation system that helps your program find files and folders correctly, regardless of what computer it's running on.
Why Do We Need the Path Module?
Different computer systems write file locations differently:

Windows uses backslashes: C:\Users\John\Documents\file.txt
Mac/Linux uses forward slashes: /Users/John/Documents/file.txt

If you hardcode paths with the wrong slashes, your app might work on your computer but break on someone else's! The Path module handles these differences automatically.
What the Path Module Does (in Plain English):

Joins Paths Together Safely
Instead of writing:
let filePath = folderName + '/' + fileName;  // Might break on Windows


You write:
javascriptlet filePath = path.join(folderName, fileName);  // Works everywhere

Figures Out File Information

Gets just the filename: path.basename('/Users/John/document.txt') gives you "document.txt"
Gets just the folder: path.dirname('/Users/John/document.txt') gives you "/Users/John"
Gets just the file extension: path.extname('document.txt') gives you ".txt"


------------------------------------
JWT secret important?
Imagine sending someone a message with your signature on it. That‚Äôs what the JWT secret does:

üñäÔ∏è It signs the token when a user logs in.

‚úÖ Later, when that token comes back (e.g. to access user data), the server checks:

‚ÄúIs this token signed using my secret?‚Äù

If the token wasn‚Äôt signed with the correct secret, it's considered fake and gets rejected.
+++++++++++++++++++++++++++++++++++++++++++++++++

TO GENERATE IT 

node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
--------------------------------


| `isValidObjectId()` is used to...     | Why it's helpful                         |
| ------------------------------------- | ---------------------------------------- |
| Check if a string is a valid ObjectId | Prevents crashes during database queries |
| Avoids converting bad values          | Keeps your API safe and error-free       |
| Validates input before querying       | Improves code robustness and security    |

isValidObjectId("507f191e810c19729de860ea") // ‚úÖ true
isValidObjectId("123")                      // ‚ùå false
isValidObjectId(null)                       // ‚ùå false
isValidObjectId(1234567890)                // ‚ùå false
====================================================================================


map(transaction=>({...transaction.toObject(), type:'income'})): This line maps each income transaction to a new object that includes all the original transaction properties, plus a new type property set to 'income'.



[...(income transactions), ...(expense transactions)]: This line combines the income and expense transactions into a single array.

.sort ((a, b) => b.date - a.date): This line sorts the combined array of transactions in descending order by date.


Result: The lastTransactions variable will contain an array of the user's 5 most recent transactions, including both income and expenses, sorted in descending order by date. Each transaction object will have the following properties:

* `date`: The date of the transaction.
* `type`: The type of transaction (`'income'` or `'expense'`).
* Other properties specific to the transaction (e.g., `amount`, `description`, etc.).


[
  { date: '2023-02-15', type: 'income', amount: 1000 },
  { date: '2023-02-12', type: 'expense', amount: 500 },
  { date: '2023-02-10', type: 'income', amount: 500 },
  { date: '2023-02-08', type: 'expense', amount: 200 },
  { date: '2023-02-05', type: 'income', amount: 2000 }
]
```

---------------------------------------------------------------

The code snippet is adding a request interceptor to the Axios instance. A request interceptor is a function that is called before a request is sent to the server. It allows you to modify the request configuration before it is sent.

If you run this:


axiosInstance.get('/profile');
The interceptor will:

Pull the token from localStorage.

Add it to the header as:

makefile
Copy code
Authorization: Bearer abc123yourtoken
Send the request to:

arduino
Copy code
https://your-api-base-url.com/profile
 Final Result: Headers Sent
http
Copy code
GET /profile HTTP/1.1
Host: your-api.com
Authorization: Bearer abc123yourtoken
Content-Type: application/json
Accept: application/json



----------------------------------------------------------
Step-by-Step Flow of JWT Authentication (Frontend + Backend)
1Ô∏è‚É£ User Logs In (React Form)
User fills login form (email + password) and clicks Login.

Your React app makes a POST request via Axios:

js
Copy code
axios.post('/api/v1/auth/login', { email, password });
2Ô∏è‚É£ Backend Verifies Credentials
The Node.js server checks the email/password in the database.

If valid, it creates a JWT token:

js
Copy code
const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
  expiresIn: '7d',
});
Then it sends this token back in the response:

json
Copy code
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "_id": "...",
    "name": "Saksham"
  }
}
3Ô∏è‚É£ React Saves the Token
In your React app, you store the token (commonly in localStorage):

js
Copy code
localStorage.setItem('token', res.data.token);
4Ô∏è‚É£ React Makes Authenticated Requests
Whenever you call a protected route like:

js
Copy code
axios.get('/api/v1/auth/getuser');
You must attach the token in the Authorization header. That‚Äôs done using an Axios interceptor:

js
Copy code
config.headers.Authorization = `Bearer ${token}`;
5Ô∏è‚É£ Backend Verifies the Token (Middleware)
On protected routes (like /getuser), the backend uses a middleware:

js
Copy code
const token = req.headers.authorization?.split(' ')[1];
jwt.verify(token, process.env.JWT_SECRET);
If the token is valid:

Backend attaches user info to req.user

Proceeds to the next handler (controller)

If invalid/missing:

Sends back 401 Unauthorized

6Ô∏è‚É£ You Access Protected Data
If all goes well, the response gives you user-specific data:

json
Copy code
{
  "_id": "123",
  "name": "Saksham",
  "email": "saksham@email.com"
}
üîÅ Full Cycle Recap:
‚úÖ User logs in

üîë Token is generated by backend

üíæ Token is saved in localStorage

üì§ Axios adds token in Authorization header

üîç Backend checks token

‚úÖ If valid ‚Üí access granted

üö´ If invalid ‚Üí access denied

---------------------------------------------------------
window.location.href is a property of the window object in a web browser that returns the current URL of the page.
It can be used to redirect the user to a different URL by setting its value to a new URL.
In the context of the code, window.location.href = '/login

----------------------------------------------------------------------
                 SIGNUP PROCESS
. User Submits Signup Form
Example:

js
Copy code
axios.post('/api/v1/auth/register', {
  name: 'Saksham',
  email: 'saksham@email.com',
  password: '123456',
});
2. Backend Creates a New User
Validates data (e.g., email format, password strength)

Checks if the email already exists

Hashes the password using bcrypt

Saves the new user in MongoDB

 3. JWT Token is Created
After the user is saved successfully, a JWT token is generated:

js
Copy code
const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
  expiresIn: '7d',
});
 4. Token is Sent to the Frontend
json
Copy code
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "_id": "65432...",
    "name": "Saksham"
  }
}
 5. Frontend Stores the Token
In localStorage (or cookies), so it can be used in future requests:

 6. User is Logged In Instantly
Because you now have the token, the user is considered logged in ‚Äî no need to log in again separately. The app redirects to the dashboard or homepage
-------------------------------------------------------------------

